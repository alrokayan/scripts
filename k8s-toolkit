#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#  
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# HOW TO:
# rm -r scripts && git clone https://github.com/alrokayan/scripts.git && cd scripts && chmod +x * && ./k8s-toolkit
# OR
# curl -fL -H 'Cache-Control: no-cache, no-store' https://raw.githubusercontent.com/alrokayan/scripts/main/k8s-toolkit | bash -s
# ~/.shellcheckrc
if ! [ -f _include ]; then curl -sfL -H 'Cache-Control: no-cache, no-store' https://raw.githubusercontent.com/alrokayan/scripts/main/_include -o _include; fi
if ! [ -f .env ]; then touch .env; fi
chmod +x _include .env
mkdir -p tmp bin 
. _include
SCRIPT_PATH="$(pwd)/bin"
export PATH="$SCRIPT_PATH:$PATH"
if ! grep "export SSH_EXTRA_ARGS=" .env; then
  echo 'export SSH_EXTRA_ARGS="-o StrictHostKeyChecking=no"' >> .env
fi

source .env
cat .env
if [ -f "$KUBECONFIG" ]; then
  chmod g+r kubeconfig
  chmod go-r kubeconfig
fi
## GENERAL DEFAULT VALUES
export NODE_ARRAY_DEFAULT="(10.99.0.100 10.99.0.101 10.99.0.102 10.99.0.103)"
KUBECONFIG_DEFAULT="$(pwd)/kubeconfig"
export KUBECONFIG_DEFAULT
export CLUSTER_CIDR_DEFAULT="10.244"
export L2_SWITCH_DEFAULT="n"
export MASTER_SCHEDULE_DEFAULT="n"
export TZ_DEFAULT="Etc/GMT"
export SSH_USERNAME_DEFAULT="root"
PRIVATE_KEY_DEFAULT="$(pwd)/.ssh/id_rsa"
export PRIVATE_KEY_DEFAULT
## DEFAULT VALUES FOR STEP 4 (GENERATE EXAMPLE CSV FILE)
export CSV_MASTER_NIC_DEFAULT="eth0"
export CSV_NFS_SERVER_DEFAULT="10.0.0.1"
export CSV_NFS_PATH_DEFAULT="/mnt/kube-volumes"
export CSV_LARGE_NFS_PATH_DEFAULT="/mnt/hdd"
export CSV_IP_DEFAULT=10.99.0.50
export CSV_CIDR_DEFAULT=24
export CSV_GW_DEFAULT=10.99.0.1
export CSV_DNS1_DEFAULT=1.1.1.1
export CSV_DNS2_DEFAULT=8.8.8.8


#######################################
#######################################
### FUNCTION deployFileCreation #######
#######################################
#######################################
function deployFileCreation() {
  if [ ! -f deploy.csv ]; then
    if $CONTINUE; then
      unset READ_VAR_ASK
    else
      READ_VAR_ASK=1
    fi
    readVar CSV_MASTER_NIC "$CSV_MASTER_NIC_DEFAULT" "What's your default network interface (run \"ip a\" in the master node to get the list)?" $READ_VAR_ASK 
    readVar CSV_NFS_SERVER "$CSV_NFS_SERVER_DEFAULT" "What's your NFS server?" $READ_VAR_ASK 
    readVar CSV_NFS_PATH "$CSV_NFS_PATH_DEFAULT" "What's the NFS server's path where all volumes are?" $READ_VAR_ASK 
    readVar CSV_LARGE_NFS_PATH "$CSV_LARGE_NFS_PATH_DEFAULT" "What's the NFS server's path where all large files (media and downloads) are?" $READ_VAR_ASK 
    readVar CSV_IP "$CSV_IP_DEFAULT" "Give example of a valid local IP?" $READ_VAR_ASK 
    readVar CSV_CIDR "$CSV_CIDR_DEFAULT" "What's the CIDR suffex for $CSV_IP?" $READ_VAR_ASK 
    export CSV_CIDR="${CSV_CIDR//$'/'/}"
    readVar CSV_GW "$CSV_GW_DEFAULT" "What's the gateway for $CSV_IP?" $READ_VAR_ASK 
    readVar CSV_DNS1 "$DNS1" "What's the DNS1 for $CSV_IP?" $READ_VAR_ASK 
    readVar CSV_DNS2 "$DNS2" "hat's the DNS2 for $CSV_IP?" $READ_VAR_ASK 
    if [ "$CSV_MASTER_NIC" == "" ]; then CSV_MASTER_NIC=$CSV_MASTER_NIC_DEFAULT; fi
    if [ "$CSV_LARGE_NFS_PATH" == "" ]; then CSV_LARGE_NFS_PATH=$CSV_LARGE_NFS_PATH_DEFAULT; fi
    if [ "$CSV_NFS_SERVER" == "" ]; then CSV_NFS_SERVER=$CSV_NFS_SERVER_DEFAULT; fi
    if [ "$CSV_NFS_PATH" == "" ]; then CSV_NFS_PATH=$CSV_NFS_PATH_DEFAULT; fi
    if [ "$CSV_IP" == "" ]; then CSV_IP=$CSV_IP_DEFAULT; fi
    if [ "$CSV_CIDR" == "" ]; then CSV_CIDR=$CSV_CIDR_DEFAULT; fi
    if [ "$CSV_GW" == "" ]; then CSV_GW=$CSV_GW_DEFAULT; fi
    if [ "$CSV_DNS1" == "" ]; then CSV_DNS1=$CSV_DNS1_DEFAULT; fi
    if [ "$CSV_DNS2" == "" ]; then CSV_DNS2=$CSV_DNS2_DEFAULT; fi
    cat <<EOF >deploy.csv
app_name,helm_truechart,storage_name,storage_enabled,storage_path,storage_subPath,storage_server,storage_type,storage_mountPath,nw_master_nic,nw_mac,nw_address_with_subnet,nw_gateway,nw_dns1,nw_dns2,run_as_user,run_as_group,privileged,extra_helm_values
plex,plex,config,true,$CSV_NFS_PATH/plex,config,$CSV_NFS_SERVER,nfs,/config,,,,,,,,,,
plex,plex,movies,true,$CSV_LARGE_NFS_PATH/Media,Movies,$CSV_NFS_SERVER,nfs,/Movies,,,,,,,,,,
plex,plex,tv,true,$CSV_LARGE_NFS_PATH/Media,TV,$CSV_NFS_SERVER,nfs,/TV,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 1)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,
radarr,radarr,config,true,$CSV_NFS_PATH/radarr,config,$CSV_NFS_SERVER,nfs,/config,,,,,,,,,,
radarr,radarr,movies,true,$CSV_LARGE_NFS_PATH/Media,Movies,$CSV_NFS_SERVER,nfs,/movies,,,,,,,,,,
radarr,radarr,downloads,true,$CSV_LARGE_NFS_PATH/Downloads,,$CSV_NFS_SERVER,nfs,/downloads,$CSV_MASTER_NIC,$(printf '00:2F:60:%02X:%02X:%02X\n' "$(shuf -i 0-99 -n 1)" "$(shuf -i 101-199 -n 1)" "$(shuf -i 201-256 -n 1)"),,,,,0,0,true,
sonarr,sonarr,config,true,$CSV_NFS_PATH/sonarr,config,$CSV_NFS_SERVER,nfs,/config,,,,,,,,,,
sonarr,sonarr,tv,true,$CSV_LARGE_NFS_PATH/Media,TV,$CSV_NFS_SERVER,nfs,/tv,,,,,,,,,,
sonarr,sonarr,downloads,true,$CSV_LARGE_NFS_PATH/Downloads,,$CSV_NFS_SERVER,nfs,/downloads,$CSV_MASTER_NIC,$(printf '00:2F:60:%02X:%02X:%02X\n' "$(shuf -i 0-99 -n 1)" "$(shuf -i 101-199 -n 1)" "$(shuf -i 201-256 -n 1)"),,,,,0,0,true,
sabnzbd,sabnzbd,config,true,$CSV_NFS_PATH/sabnzbd,config,$CSV_NFS_SERVER,nfs,/config,,,,,,,,,,
sabnzbd,sabnzbd,downloads,true,$CSV_LARGE_NFS_PATH/Downloads,,$CSV_NFS_SERVER,nfs,/downloads,$CSV_MASTER_NIC,$(printf '00:2F:60:%02X:%02X:%02X\n' "$(shuf -i 0-99 -n 1)" "$(shuf -i 101-199 -n 1)" "$(shuf -i 201-256 -n 1)"),,,,,0,0,true,
overseerr,overseerr,config,true,$CSV_NFS_PATH/overseerr,config,$CSV_NFS_SERVER,nfs,/app/config,$CSV_MASTER_NIC,$(printf '00:2F:60:%02X:%02X:%02X\n' "$(shuf -i 0-99 -n 1)" "$(shuf -i 101-199 -n 1)" "$(shuf -i 201-256 -n 1)"),,,,,0,0,true,
code-server,code-server,config,true,$CSV_NFS_PATH/code-server,config,$CSV_NFS_SERVER,nfs,/config,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 1)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,
netbootxyz,netbootxyz,config,true,$CSV_NFS_PATH/netbootxyz,config,$CSV_NFS_SERVER,nfs,/config,,,,,,,,,,
netbootxyz,netbootxyz,assets,true,$CSV_NFS_PATH/netbootxyz,assets,$CSV_NFS_SERVER,nfs,/assets,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP "2)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,
homepage,homepage,config,true,$CSV_NFS_PATH/homepage,config,$CSV_NFS_SERVER,nfs,/app/config,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 3)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,,,,
home-assistant,home-assistant,config,true,$CSV_NFS_PATH/home-assistant,config,$CSV_NFS_SERVER,nfs,/config,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 4)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,--set cnpg.main.enabled=false --set configmap.init.enabled=false --set persistence.init.enabled=false --set workload.main.podSpec.initContainers.init.enabled=false
mosquitto,mosquitto,data,true,$CSV_NFS_PATH/mosquitto,data,$CSV_NFS_SERVER,nfs,/mosquitto/data,,,,,,,,,,
mosquitto,mosquitto,mosquitto-config,false,,,,,,,,,,,,,,,
mosquitto,mosquitto,configinc,false,,,,,,,,,,,,,,,
mosquitto,mosquitto,config,true,$CSV_NFS_PATH/mosquitto,config,$CSV_NFS_SERVER,nfs,/mosquitto/config,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 5)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,,,,
zigbee2mqtt,zigbee2mqtt,data,true,$CSV_NFS_PATH/zigbee2mqtt,data,$CSV_NFS_SERVER,nfs,/data,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 6)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,--set workload.main.podSpec.initContainers.init-config.enabled=false --set containers.main.env.USE_CUSTOM_CONFIG_FILE=true
node-red,node-red,data,true,$CSV_NFS_PATH/node-red,data,$CSV_NFS_SERVER,nfs,/data,$CSV_MASTER_NIC,,$(NEXT_IP "$CSV_IP" 7)/$CSV_CIDR,$CSV_GW,$CSV_DNS1,$CSV_DNS2,0,0,true,
EOF
  fi
}
#######################################
#######################################
###### FUNCTION copyKubeconfig ########
#######################################
#######################################
function copyKubeconfig() {
  if ! [ -f "$KUBECONFIG" ]; then
    echo "-- Creating $KUBECONFIG"
    for IP in "${NODE_ARRAY[@]}"; do
      ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" DEBIAN_FRONTEND="noninteractive" i="$i" "bash -s" <<'____EOF____'
#!/bin/bash
rm -f ~/.kube/config
cp -i /etc/kubernetes/admin.conf ~/.kube/config 
chown "$(id -un)":"$(id -gn)" ~/.kube/config 
chmod g+r ~/.kube/config 
chmod go-r ~/.kube/config 
____EOF____
      rm -f "$KUBECONFIG".BACKUP
      mv "$KUBECONFIG" "$KUBECONFIG".BACKUP
      scp -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP":~/.kube/config "$KUBECONFIG"
      chown "$(id -un)":"$(id -gn)" "$KUBECONFIG"
      chmod g+r "$KUBECONFIG"
      chmod go-r "$KUBECONFIG"
      break
    done
  fi
}

#######################################
#######################################
# FUNCTION createNetworkAttachmentDefinition_STATIC
#######################################
#######################################
function createNetworkAttachmentDefinition_STATIC() {
  cat <<EOF | kubectl create -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: $BRIDGE_NAME
  namespace: $APP_NAMESPACE
spec:
  config: '{
      "cniVersion": "1.0.0",
      "name": "$BRIDGE_NAME",
      "plugins": [
        {
          "cniVersion": "1.0.0",
          "type": "macvlan",
          "mode": "bridge",
          "mac": "$MAC",
          "master": "$MASTER_NIC",
          "isDefaultGateway": true,
          "enableIPv6": false,
          "ipam": {
            "type": "static",
            "addresses":
            [
              {
                "address": "$IPCIDR", 
                "gateway": "$GW"
              }
            ],
            "routes":
            [
              {
                "dst": "0.0.0.0/0"
              }
            ]
          },
          "dns":
          {
            "nameservers":
            [
              "$DNS1",
              "$DNS2" 
            ]
          }
        },
        {
          "type": "portmap",
          "capabilities": {
            "portMappings": true
          },
          "snat": true
        },
        {
          "capabilities": { "mac": true },
          "type": "tuning"
        }
      ]
    }'
EOF
}

#######################################
#######################################
# FUNCTION createNetworkAttachmentDefinition_DHCP
#######################################
#######################################
function createNetworkAttachmentDefinition_DHCP() {
  cat <<EOF | kubectl create -f -
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: $BRIDGE_NAME
  namespace: $APP_NAMESPACE
spec:
  config: '{
      "cniVersion": "1.0.0",
      "name": "$BRIDGE_NAME",
      "plugins": [
        {
          "cniVersion": "1.0.0",
          "type": "macvlan",
          "mode": "bridge",
          "mac": "$MAC",
          "master": "$MASTER_NIC",
          "isDefaultGateway": true,
          "enableIPv6": false,
          "ipam": {
            "type": "dhcp",
            "routes":
            [
              {
                "dst": "0.0.0.0/0"
              }
            ],
            "daemonSocketPath": "/run/cni/dhcp.sock",
            "request": [
              {
                  "skipDefault": false
              }
            ],
            "provide": [
              {
                "option": "host-name",
                "fromArg": "k8s-$APP_NAMESPACE"
              }
            ]
          },
          "dns":
          {
            "nameservers":
            [
              "$DNS1",
              "$DNS2"
            ]
          }
        },
        {
          "type": "portmap",
          "capabilities": {
            "portMappings": true
          },
          "snat": true
        },
        {
          "capabilities": { "mac": true },
          "type": "tuning"
        }
      ]
    }'
EOF
}

#######################################
#######################################
###### FUNCTION SWAPRemoval ###########
#######################################
#######################################
function SWAPRemoval() {
  echo "-- Removing SWAP and rebooting if needed on all nodes" 
  for IP in "${NODE_ARRAY[@]}"; do
    (
      ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" DEBIAN_FRONTEND="noninteractive" "bash -s" <<'____EOF____'
#!/bin/bash
if free | awk '/^Swap:/ {exit !$2}'; then
  echo "-- NODE $i -- removing swap partition "
  sed -e '/swap/ s/^#*/#/' -i /etc/fstab
  umount /swap.img
  rm -f /swap.img
  swapoff -a
  reboot
fi
____EOF____
    ) &
  done
  wait
  WAIT_ALL_NODES_ONLINE "${NODE_ARRAY[@]}"
}

#######################################
#######################################
####### FUNCTION runDNSTool ###########
#######################################
#######################################
function runDNSTool() {
  readVar app_dnstools_master_nic "eth0" "Please entre master NIC for dnstools (run \"ip a\" in ${#NODE_ARRAY[0]} to get all available NICs)" 1
  readVar app_dnstools_mac "$(printf '00:2F:60:%02X:%02X:%02X\n' "$(shuf -i 0-99 -n 1)" "$(shuf -i 101-199 -n 1)" "$(shuf -i 201-256 -n 1)")" "Please entre the MAC address for this NIC" 1
  readVar app_dnstools_ip "" "Please entre the IP address for dnstools with subnet suffex (example: 10.99.0.60/24). Leave empty for DHCP" 1
  export MASTER_NIC="$app_dnstools_master_nic"
  export BRIDGE_NAME="cbr-$app_dnstools_master_nic"
  export APP_NAMESPACE="app-dnstools"
  export MAC="$app_dnstools_mac"
  echo "-- Creating $APP_NAMESPACE namespace"
  kubectl create ns $APP_NAMESPACE
  kubectl delete network-attachment-definitions.k8s.cni.cncf.io "$BRIDGE_NAME" -n "$APP_NAMESPACE"
  if [ "$app_dnstools_ip" != "" ]; then
    readVar app_dnstools_gw "10.99.0.1" "Please entre the gateway address for dnstools" 1
    echo "-- Deploying cbr1-$app_dnstools_master_nic NetworkAttachmentDefinition" 
    export IPCIDR="$app_dnstools_ip"
    export GW="$app_dnstools_gw"
    createNetworkAttachmentDefinition_STATIC
  else
    echo "-- Deploying cbr2-$app_dnstools_master_nic NetworkAttachmentDefinition" 
    createNetworkAttachmentDefinition_DHCP
  fi
  echo "-- Running dnstools pod" 
  kubectl run -it --rm \
    --namespace $APP_NAMESPACE \
    --restart=Never \
    --image=infoblox/dnstools:latest \
    --annotations="'k8s.v1.cni.cncf.io/networks=$BRIDGE_NAME'" \
    dnstools 
  echo "-- Deleting $APP_NAMESPACE namespace" 
  kubectl delete ns $APP_NAMESPACE --grace-period=0 --force
}

#######################################
#######################################
######### FUNCTION binInstall #########
#######################################
#######################################
function binInstall() {
  force_install_bin=$1
  if [[ "$(uname -s)" == *"Linux"* ]]; then
    if $force_install_bin; then
      echo "-- OS: Linux - DOWNLOADING BINARIES" 
    else
      echo "-- OS: Linux - CHECKING BINARIES" 
    fi
    if ! command -v helm &> /dev/null || ! [ -f bin/helm ] || $force_install_bin; then
      rm -f bin/helm
      curl -L https://get.helm.sh/helm-v3.15.2-linux-"$(dpkg --print-architecture)".tar.gz -o tmp/helm.tar.gz
      tar -zxf tmp/helm.tar.gz -C tmp
      mv tmp/linux-"$(dpkg --print-architecture)"/helm bin/
      chmod +x bin/helm
      if [ "$(which helm)" == "$(pwd)/bin/helm" ]; then echo "-- bin/helm installed successfully" ; fi
    fi
    if ! command -v kubectl &> /dev/null || ! [ -f bin/kubectl ] || $force_install_bin; then
      rm -f bin/kubectl
      curl -L "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/$(dpkg --print-architecture)/kubectl" -o bin/kubectl
      chmod +x bin/kubectl
      if [ "$(which kubectl)" == "$(pwd)/bin/kubectl" ]; then echo "-- bin/kubectl installed successfully" ; fi
    fi
    if ! command -v jq &> /dev/null || ! [ -f bin/jq ] || $force_install_bin; then
      rm -f bin/jq
      curl -L "https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-$(dpkg --print-architecture)" -o bin/jq
      chmod +x bin/jq
      if [ "$(which jq)" == "$(pwd)/bin/jq" ]; then echo "-- bin/jq installed successfully" ; fi
    fi
    if ! command -v k9s &> /dev/null || ! [ -f bin/k9s ] || $force_install_bin; then
      rm -f bin/k9s
      curl -L https://github.com/derailed/k9s/releases/download/v0.32.5/k9s_Linux_"$(dpkg --print-architecture)".tar.gz -o tmp/k9s.tar.gz
      mkdir tmp/k9s
      tar -zxf tmp/k9s.tar.gz -C tmp/k9s
      mv tmp/k9s/k9s bin/
      chmod +x bin/k9s
      if [ "$(which k9s)" == "$(pwd)/bin/k9s" ]; then echo "-- bin/k9s installed successfully" ; fi
    fi
  fi
  if [[ "$(uname -s)" == *"Darwin"* ]]; then
    if $force_install_bin; then
      echo "-- OS: macOS - DOWNLOADING BINARIES" 
    else
      echo "-- OS: macOS - CHECKING BINARIES" 
    fi
    if ! command -v helm &> /dev/null || ! [ -f bin/helm ] || $force_install_bin; then
      rm -f bin/helm
      curl -L "https://get.helm.sh/helm-v3.15.2-darwin-$(arch).tar.gz" -o tmp/helm.tar.gz
      tar -zxf tmp/helm.tar.gz -C tmp
      mv tmp/darwin-"$(arch)"/helm bin/
      chmod +x bin/helm
      if [ "$(which helm)" == "$(pwd)/bin/helm" ]; then echo "-- bin/helm installed successfully" ; fi
    fi
    if ! command -v kubectl &> /dev/null || ! [ -f bin/kubectl ] || $force_install_bin; then
      rm -f bin/kubectl
      curl -L "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/$(arch)/kubectl" -o bin/kubectl
      chmod +x bin/kubectl
      if [ "$(which kubectl)" == "$(pwd)/bin/kubectl" ]; then echo "-- bin/kubectl installed successfully" ; fi
    fi
    if ! command -v jq &> /dev/null || ! [ -f bin/jq ] || $force_install_bin; then
      rm -f bin/jq
      curl -L "https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-macos-$(arch)" -o bin/jq
      chmod +x bin/jq
      if [ "$(which jq)" == "$(pwd)/bin/jq" ]; then echo "-- bin/jq installed successfully" ; fi
    fi
    if ! command -v k9s &> /dev/null || ! [ -f bin/k9s ] || $force_install_bin; then
      rm -f bin/k9s
      curl -L "https://github.com/derailed/k9s/releases/download/v0.32.5/k9s_Darwin_$(arch).tar.gz" -o tmp/k9s.tar.gz
      mkdir tmp/k9s
      tar -zxf tmp/k9s.tar.gz -C tmp/k9s
      mv tmp/k9s/k9s bin/
      chmod +x bin/k9s
      if [ "$(which k9s)" == "$(pwd)/bin/k9s" ]; then echo "-- bin/k9s installed successfully" ; fi
    fi
  fi
  chown "$(id -un)":"$(id -gn)" bin/*
  chmod +x bin/*
  which helm
  which kubectl
  which k9s
  which jq
  helm version
  kubectl version --client=true
  k9s version
  jq --version
}
#######################################
#######################################
####### FUNCTION FixFlannel ###########
#######################################
#######################################
function FixFlannel() {
  echo "-- Fixing flannel/cni NIC on all nodes" 
  for IP in "${NODE_ARRAY[@]}"; do
    (
      ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" DEBIAN_FRONTEND="noninteractive" "bash -s" <<'____EOF____'
#!/bin/bash
for nic in $(ip link show | grep -e ": cni" -e ": flannel" | awk -F@ '{print $1}' | awk '{print $2}'); do
  ip link set $nic down
  ip link delete $nic
done
systemctl restart containerd 
systemctl restart kubelet 
____EOF____
    ) &
  done
  wait
}

#######################################
#######################################
######### FUNCTION setDNS1 ############
#######################################
#######################################
function setDNS1() {
  CORE_DNS_POD_NAME1=$(kubectl get pod -l k8s-app=kube-dns -n kube-system --no-headers=true | awk 'NR==1{print $1}')
  CORE_DNS_DNS1=$(kubectl get pod "$CORE_DNS_POD_NAME1" -n kube-system --template '{{.status.podIP}}')
}

#######################################
#######################################
######### FUNCTION setDNS2 ############
#######################################
#######################################
function setDNS2() {
  CORE_DNS_POD_NAME2=$(kubectl get pod -l k8s-app=kube-dns -n kube-system --no-headers=true | awk 'NR==2{print $1}')
  CORE_DNS_DNS2=$(kubectl get pod "$CORE_DNS_POD_NAME2" -n kube-system --template '{{.status.podIP}}')
}

#######################################
#######################################
######### FUNCTION FixDNS #############
#######################################
#######################################
function FixDNS() {
  echo "-- Fixing CoreDNS IP addresses in kubelet config " 
  setDNS1
  setDNS2
  echo "-- CoreDNS IP1: $CORE_DNS_DNS1" 
  echo "-- CoreDNS IP2: $CORE_DNS_DNS2" 
  for IP in "${NODE_ARRAY[@]}"; do
    ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" DEBIAN_FRONTEND="noninteractive" i="$i" CORE_DNS_DNS1="$CORE_DNS_DNS1" CORE_DNS_DNS2="$CORE_DNS_DNS2" "bash -s" <<'____EOF____'
#!/bin/bash
if [ "$CORE_DNS_DNS1" != "<no value>" ]; then
  mkdir -p /var/lib/kubelet/kubeletconfigurationpatches
  if [ "$CORE_DNS_DNS2" != "<no value>" ]; then
    echo "clusterDNS:
- $CORE_DNS_DNS1
- $CORE_DNS_DNS2
clusterDomain: cluster.local
resolvConf: /etc/resolv.conf" > '/var/lib/kubelet/kubeletconfigurationpatches/kubeletconfiguration0+merge.yaml'
  else
    echo "clusterDNS:
- $CORE_DNS_DNS1
clusterDomain: cluster.local
resolvConf: /etc/resolv.conf" > '/var/lib/kubelet/kubeletconfigurationpatches/kubeletconfiguration0+merge.yaml'
  fi
fi
echo "-- $HOSTNAME: Upgrading kubelet configuration"
kubeadm upgrade node phase kubelet-config --patches /var/lib/kubelet/kubeletconfigurationpatches/
____EOF____
    break
  done
}

#######################################
#######################################
############ FUNCTION unD #############
#######################################
#######################################
function unD() {
  echo "-- Uninstalling apps" 
  NSLIST="$(kubectl get namespaces -o name | grep -v kube- | cut -c 11-)"
  for ns in $NSLIST; do
    echo "-- Uninstalling all resources in $ns " 
    (
      helm ls --all --short -n "$ns" | xargs -L1 helm delete -n "$ns"
      kubectl delete all --all --namespace="$ns" --grace-period=0 --force
      if [ "$ns" != "default" ]; then
        kubectl delete ns "$ns" --grace-period=0 --force
      fi
    ) &
  done

  if ! $1; then
    wait
    echo "-- apps uninstalled (kube-network skipped)" 
  else
    echo "-- Uninstalling Multus" 
    (
    if ! [ -f tmp/multus-daemonset-thick.yml ]; then
      curl --silent -fsSL https://raw.githubusercontent.com/k8snetworkplumbingwg/multus-cni/master/deployments/multus-daemonset-thick.yml -o tmp/multus-daemonset-thick.yml
      sed -i.BACKUP 's/namespace: kube-system/namespace: kube-network/g' tmp/multus-daemonset-thick.yml
    fi
    kubectl delete -n kube-network -f tmp/multus-daemonset-thick.yml --grace-period=0 --force
    ) &

    echo "-- Uninstalling DHCP" 
    (
    if ! [ -f tmp/dhcp-daemonset.yml ]; then
      curl --silent -fsSL https://raw.githubusercontent.com/k8snetworkplumbingwg/reference-deployment/master/multus-dhcp/dhcp-daemonset.yml -o tmp/dhcp-daemonset.yml
      sed -i.BACKUP 's/namespace: kube-system/namespace: kube-network/g' tmp/dhcp-daemonset.yml
    fi
    kubectl delete -n kube-network -f tmp/dhcp-daemonset.yml --grace-period=0 --force
    ) &

    echo "-- Uninstalling flannel" 
    ( helm uninstall flannel -n kube-network ) &
    echo "-- Uninstalling all resources in kube-network " 
    (
      helm ls --all --short -n "kube-network" | xargs -L1 helm delete -n "kube-network"
      kubectl delete all --all --namespace="$ns" --grace-period=0 --force
      kubectl delete ns "kube-network" --grace-period=0 --force
    ) &
    wait

    echo "-- Deleting leftover NICs, and cni files on all nodes" 
    for IP in "${NODE_ARRAY[@]}"; do
      (
      ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" bash <<'____EOF____'
#!/bin/bash
echo "-- $HOSTNAME: deleting leftover NICs"
for nic in $(ip link show | grep -e ": cni" -e ": flannel" | awk -F@ '{print $1}' | awk '{print $2}'); do
  ip link set $nic down
  ip link delete $nic
done

echo "-- $HOSTNAME: Force stopping cni demon"
kill -9 $(ps aux | grep "/opt/cni/bin" | awk '{print $2}')

echo "-- $HOSTNAME: Deleting cni files"
rm -rf /run/flannel
rm -rf /opt/cni
rm -rf /run/cni
rm -rf /var/lib/cni
rm -rf /etc/cni
____EOF____
      ) &
    done
    wait

    echo "-- Restarting CoreDNS" 
    kubectl delete pod --selector=k8s-app=kube-dns -n kube-system --grace-period=0 --force
  fi
  echo "-- Uninstalling Network-Attachment-Definitions" 
  kubectl delete Network-Attachment-Definitions --all -A --grace-period=0 --force
}

#######################################
#######################################
####### FUNCTION END_OF_SCRIPT ########
#######################################
#######################################
function END_OF_SCRIPT() {
  if $CONTINUE; then
    echo "-------------------------------------------------------------" 
    echo "👍 Script executed successfully. Press any key to continue .." 
    echo "-------------------------------------------------------------" 
    read -r
  fi
}

#######################################
#######################################
###### FUNCTION step0 1 2 3 4 5 #######
#######################################
#######################################
function step0() {
  binInstall
  copyKubeconfig
  SWAPRemoval
  for IP in "${NODE_ARRAY[@]}"; do
    response="$(curl -w '%{http_code}' -o /dev/null -ILks "https://$IP:6443")"
    break
  done
  if [[ "$response" != *"000"* ]]; then
    unD
    for i in $(kubectl get nodes -o name | cut -c 6-); do
      echo "-- Draining and deleting $i" 
      kubectl drain "$i" --force --grace-period=0
      kubectl delete node "$i" --all --force --grace-period=0
    done
  fi

  echo "-- Uninstalling (reset kubeadm, firewall, files, network) on all nodes" 
  for IP in "${NODE_ARRAY[@]}"; do
    (
      ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" DEBIAN_FRONTEND="noninteractive" "bash -s" <<'____EOF____'
#!/bin/bash

echo "-- $HOSTNAME: Uninstalling"
if command -v kubeadm &> /dev/null; then
    echo "-- $HOSTNAME: Resting k8s"
    kubeadm reset --cleanup-tmp-dir --force 
fi

echo "-- $HOSTNAME: Clearing firewall"
iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
ipvsadm --clear 

echo "-- $HOSTNAME: Uninstalling k8s (kubelet, kubeadm, and containerd)"
apt-mark unhold kubelet kubeadm kubectl docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 
for pkg in kubectl kubeadm kubelet ipvsadm docker-ce docker-ce-cli docker.io containerd.io docker-doc docker-build-plugin docker-compose-plugin docker-compose docker-compose-v2 podman-docker containerd runc temurin-21-jre containerd; do
    apt purge -y --allow-change-held-packages $pkg 
done
systemctl stop $(systemctl -l | grep kube) 
systemctl disable $(systemctl -l | grep kube) 

echo "-- $HOSTNAME: Removing gpg and source lists of kubernetes and adoptium"
rm -f /etc/apt/keyrings/kubernetes-apt-keyring.gpg
rm -f /etc/apt/trusted.gpg.d/adoptium.gpg
rm -f /etc/apt/sources.list.d/kubernetes.list
rm -f /etc/apt/sources.list.d/adoptium.list
apt update -y 

systemctl daemon-reload 
echo "-- $HOSTNAME: Unmounting and deleting containerd, kubelet, cni, etcd and other kubernetes files and folders"
umount -f /var/run/containerd/*/*/*/* 
umount -f /var/lib/kubelet/*/*/*/*/* 
rm -rf /opt/containerd
rm -rf /var/lib/containerd
rm -rf /var/lib/kubelet
rm -rf /var/run/containerd
rm -rf ~/.kube
rm -rf /etc/kubernetes
rm -rf /var/lib/etcd
rm -f /run/flannel/subnet.env
rm -rf /opt/cni
rm -rf /run/cni
rm -rf /var/lib/cni
rm -rf /etc/cni
rm -f /etc/apt/trusted.gpg.d/adoptium.gpg
rm -f /etc/apt/keyrings/kubernetes-apt-keyring.gpg
rm -f /etc/apt/sources.list.d/kubernetes.list
rm -f /etc/apt/sources.list.d/adoptium.list
rm -rf /usr/libexec/kubernetes
rm -rf /var/log/containers
rm -rf /.kube
rm -f /root/kubeletconfiguration0+merge.yaml
rm -rf /tmp/*-save.txt
rm -f /etc/modules-load.d/kubernetes.conf
rm -f /etc/sysctl.d/98-kubernetes.conf
sysctl --system 
sed -i '/.*DNSStubListener=no.*/ c\#DNSStubListener=' /etc/systemd/resolved.conf

echo "-- $HOSTNAME: apt update autoremove autoclean"
apt update -y
apt autoremove -y --purge 
apt autoclean -y 
apt clean -y 

echo "-- $HOSTNAME: deleting leftover NICs"
for nic in $(ip link show | grep -e ": lxc" -e ": cali" -e ": cilium" -e ": flannel" -e ": tunl" -e ": cni" -e ": cbr" | awk -F@ '{print $1}' | awk '{print $2}'); do
  ip link set $nic down
  ip link delete $nic
done

echo "-- $HOSTNAME: Uninstall Completed"
____EOF____
    ) &
  done
  wait
  echo "---------------------------------------------------------------" 
}

##################################################################################
##################################################################################
function step1() {
  echo "-- Creating and copying hosts file" 
  echo "127.0.0.1 localhost" >tmp/hosts
  for IP in "${NODE_ARRAY[@]}"; do
    NODE_HOSTNAME=$(ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" "hostname")
    echo "$IP $NODE_HOSTNAME" >>tmp/hosts
  done
  echo '
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters' >>tmp/hosts
  for IP in "${NODE_ARRAY[@]}"; do
    (
      ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" "mv /etc/hosts /etc/hosts.BACKUP"
      scp -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" tmp/hosts "$SSH_USERNAME"@"$IP":/etc/
    ) &
  done
  wait

  echo "-- Updating, upgrading and installing pre-requisites on all nodes, please wait ..." 
  for IP in "${NODE_ARRAY[@]}"; do
    (
      ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" DEBIAN_FRONTEND="noninteractive" "bash -s" <<'____EOF____'
#!/bin/bash
echo "-- $HOSTNAME: Creating folders and setting permissions"
mkdir -p ~/.kube
mkdir -p /opt/cni/bin
mkdir -p /run/cni
mkdir -p /etc/cni/net.d
mkdir -p /etc/containerd
chown -R "$(id -un)":"$(id -gn)" /opt/cni
chown -R "$(id -un)":"$(id -gn)" /etc/cni
chown -R "$(id -un)":"$(id -gn)" /etc/containerd
chown -R "$(id -un)":"$(id -gn)" /run/cni
chmod -R +r /opt/cni/bin

echo "-- $HOSTNAME: Disabling iptables"
for cmd in iptables ip6tables iptables-legacy ip6tables-legacy; do
  $cmd-save > /tmp/$cmd-save.txt 
  $cmd -P INPUT ACCEPT 
  $cmd -P FORWARD ACCEPT 
  $cmd -P OUTPUT ACCEPT 
  $cmd -t nat -F 
  $cmd -t nat -X 
  $cmd -t mangle -F 
  $cmd -t mangle -X 
  $cmd -F 
  $cmd -X 
done
for suffex in raw mangle security nat filter; do
  modprobe -f -r "ip_tables_$suffex" 
  modprobe -f -r "ip6_tables_$suffex" 
done
update-alternatives --remove iptables /usr/sbin/iptables-legacy

echo "-- $HOSTNAME: Updating, upgrading and installing pre-requisites, please wait ..."
apt update -y 
apt upgrade -y 
apt install -y \
    apt-transport-https \
    ca-certificates \
    nfs-common \
    curl \
    gpg \
    sudo \
    wget \
    dirmngr \
    gnupg \
    software-properties-common \
    ipvsadm \
    util-linux \
    coreutils \
    git \
    rclone \
    nano \
    jq \
    cifs-utils 

echo "-- $HOSTNAME: Enabling kernel modules, ip forwarding and disabling DNSStubListener"
echo 'overlay
br_netfilter' > /etc/modules-load.d/kubernetes.conf
modprobe overlay
modprobe br_netfilter
echo 'net.bridge.bridge-nf-call-iptables=1
net.bridge.bridge-nf-call-ip6tables=1
net.bridge.bridge-nf-call-arptables=1
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1' > /etc/sysctl.d/98-kubernetes.conf
sed -i '/#DefaultTimeoutStopSec=90s/c\DefaultTimeoutStopSec=10s' /etc/systemd/system.conf
sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=\"/&usbcore.autosuspend=-1 /' /etc/default/grub
sed -i '/.*#DNSStubListener=.*/ c\DNSStubListener=no' /etc/systemd/resolved.conf
update-grub 
sysctl --system 
echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
apt-get install -y -q

echo "-- $HOSTNAME: Installing gpg for jave (adoptium) and kubernetes"
mkdir -p -m 755 /etc/apt/keyrings
mkdir -p /etc/apt/sources.list.d/
mkdir -p /etc/apt/trusted.gpg.d/
apt update -y 
# kubernetes
curl --silent -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg 
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' > /etc/apt/sources.list.d/kubernetes.list 
# adoptium
curl --silent -fsSL https://packages.adoptium.net/artifactory/api/gpg/key/public | gpg --batch --yes --dearmor -o /etc/apt/trusted.gpg.d/adoptium.gpg
echo "deb https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" > /etc/apt/sources.list.d/adoptium.list
apt update -y 

echo "-- $HOSTNAME: Installing Jave"
apt install -y temurin-21-jre 

echo "-- $HOSTNAME: Installing containerd"
apt install -y containerd

____EOF____
    ) &
  done
  wait

  if [ "$K8S_VERSION" == "" ]; then
    for IP in "${NODE_ARRAY[@]}"; do
      DEFAULT_VERSION=$(ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" bash -s "apt-cache policy kubeadm | grep Candidate | awk '{print \$2}'")
      break
    done
    readVar K8S_VERSION "$DEFAULT_VERSION" "Please entre k8s version" 1 30
  fi

  echo "-- Installing kubernetes (version: $K8S_VERSION) on all nodes" 
  for IP in "${NODE_ARRAY[@]}"; do
    (
      ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" DEBIAN_FRONTEND="noninteractive" K8S_VERSION="$K8S_VERSION" "bash -s" <<'____EOF____'
#!/bin/bash
echo "-- $HOSTNAME: Installing kubernetes (version: $K8S_VERSION)"
apt install -y --allow-change-held-packages kubelet=$K8S_VERSION kubeadm=$K8S_VERSION kubectl=$K8S_VERSION 
apt-mark hold kubelet kubeadm kubectl containerd  
sh -c "containerd config default > /etc/containerd/config.toml"  
sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml
systemctl daemon-reload 
systemctl enable --now kubelet.service
systemctl enable --now containerd.service

echo "-- $HOSTNAME: Pulling kubernetes images"
kubeadm config images pull --kubernetes-version $(echo "$K8S_VERSION" | sed 's/-[0-9].*//')
____EOF____
    ) &
  done
  wait
  echo "---------------------------------------------------------------" 
}

##################################################################################
##################################################################################
function step2() {
  echo "-- Initializing kubernetes version: ${K8S_VERSION//-[0-9].*/}"
  for IP in "${NODE_ARRAY[@]}"; do
    ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" DEBIAN_FRONTEND="noninteractive" CLUSTER_CIDR_FIRST_TWO_OCTETS="$CLUSTER_CIDR_FIRST_TWO_OCTETS" MASTER_IP="$IP" K8S_VERSION="$K8S_VERSION" SSH_USERNAME="$SSH_USERNAME" "bash -s" <<'____EOF____'
#!/bin/bash
echo "-- $HOSTNAME: Initializing k8s master version: $(echo "$K8S_VERSION" | sed 's/-[0-9].*//')"
kubeadm init  --kubernetes-version $(echo "$K8S_VERSION" | sed 's/-[0-9].*//') \
              --apiserver-advertise-address=$MASTER_IP \
              --pod-network-cidr=${CLUSTER_CIDR_FIRST_TWO_OCTETS}.0.0/16

echo "-- $HOSTNAME: Creating join.sh"
kubeadm token create --print-join-command > ~/.kube/join.sh

echo "-- $HOSTNAME: Auto kill stuck failed pods every 10 minutes"
cat <<'EOF' >/etc/systemd/system/kill-failed-pods
#!/bin/bash
while true; do
  for ns in $(kubectl --kubeconfig "/etc/kubernetes/admin.conf" get namespaces -o name | cut -c 11-); do
    for pod in $(kubectl --kubeconfig "/etc/kubernetes/admin.conf" get pods -n "$ns" -o go-template="{{ range  \$item := .items }}{{ range .status.conditions }}{{ if (or (and (eq .type \"PodScheduled\") (eq .status \"False\")) (and (eq .type \"Ready\") (eq .status \"False\"))) }}{{ \$item.metadata.name}} {{ end }}{{ end }}{{ end }}"); do
        kubectl --kubeconfig "/etc/kubernetes/admin.conf" delete pods -n "$ns" "$pod" --grace-period=0 --force
    done
  done
  sleep 600
done
EOF
chmod +x /etc/systemd/system/kill-failed-pods

cat <<EOF >/lib/systemd/system/kill-failed-pods.service
[Unit]
Description=kill-failed-pods

[Service]
Type=simple
RemainAfterExit=yes
ExecStart=/etc/systemd/system/kill-failed-pods

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl enable --now kill-failed-pods
____EOF____
    break
  done
  echo "-- Copying kubeconfig" 
  rm -f "$KUBECONFIG"
  copyKubeconfig
  echo "-- Copying kubeconfig to all nodes" 
  for IP in "${NODE_ARRAY[@]}"; do
    (scp -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$KUBECONFIG" "$SSH_USERNAME"@"$IP":~/.kube/config) &
  done
  wait

  echo "-- Copying join command file to this machine" 
  IS_MASTER=true
  for IP in "${NODE_ARRAY[@]}"; do
    if $IS_MASTER; then
      IS_MASTER=false
      rm -f tmp/join.sh
      scp -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP":~/.kube/join.sh tmp/
      chmod +x tmp/join.sh
    else
      echo "-- $IP joining the cluster" 
      scp -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" tmp/join.sh "$SSH_USERNAME"@"$IP":~/.kube/join.sh
      (
        ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" DEBIAN_FRONTEND="noninteractive" i="$i" "bash -s" <<'____EOF____'
#!/bin/bash
chmod +x $HOME/.kube/join.sh
echo "-- $HOSTNAME: Joining k8s cluster"
$HOME/.kube/join.sh
echo "-- $HOSTNAME: Completed"
____EOF____
      ) &
    fi
  done
  wait  
  echo "---------------------------------------------------------------" 
}

##################################################################################
##################################################################################
function step3() {
  copyKubeconfig
  echo "-- Adding helm repos" 
  helm repo add flannel https://flannel-io.github.io/flannel/
  helm repo add bitnami https://charts.bitnami.com/bitnami
  helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/

  echo "-- Updating helm repos" 
  helm repo update

  if [ -f "$KUBECONFIG" ]; then
    ## Allow master node to schedule pods
    if [ ${#NODE_ARRAY[@]} -eq 1 ] || [ "$MASTER_SCHEDULE" == "y" ]; then
      echo "-- Allowing master node to schedule app ..." 
      MASTER_HOSTNAME=$(ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"${NODE_ARRAY[0]}" hostname)
      kubectl taint nodes "$MASTER_HOSTNAME" node-role.kubernetes.io/control-plane:NoSchedule-
    fi

    ## Create namespaces
    echo "-- Creating kube-network namespaces" 
    kubectl create ns kube-network
    kubectl label --overwrite ns kube-network pod-security.kubernetes.io/enforce=privileged

    echo "-- Creating subnet.env and downloading cni binaries on all nodes" 
    for IP in "${NODE_ARRAY[@]}"; do
      (
      ssh -i "$PRIVATE_KEY" "$SSH_EXTRA_ARGS" "$SSH_USERNAME"@"$IP" CLUSTER_CIDR_FIRST_TWO_OCTETS="$CLUSTER_CIDR_FIRST_TWO_OCTETS" bash <<'____EOF____'
#!/bin/bash

echo "-- $HOSTNAME: Creating subnet.env"
mkdir -p /run/flannel
rm -f /run/flannel/subnet.env
cat << EOF > /run/flannel/subnet.env
FLANNEL_NETWORK=${CLUSTER_CIDR_FIRST_TWO_OCTETS}.0.0/16
FLANNEL_SUBNET=${CLUSTER_CIDR_FIRST_TWO_OCTETS}.$i.0/24
FLANNEL_MTU=1450
FLANNEL_IPMASQ=true
EOF

echo "-- $HOSTNAME: Downloading CNI binaries cni-plugins-linux-$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64)-v1.5.0.tgz"
mkdir -p /opt/cni/bin
curl -s -L "https://github.com/containernetworking/plugins/releases/download/v1.5.0/cni-plugins-linux-$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64)"-v1.5.0.tgz | tar xzf - -C /opt/cni/bin
chown -R "$(id -un)":"$(id -gn)" /opt/cni
____EOF____
      ) &
    done
    wait
    
    if [ "$L2_SWITCH" == "y" ]; then
      FLANNEL_BACKEND="host-gw"
    else
      FLANNEL_BACKEND="vxlan"
    fi
    echo "-- Deploying flannel with backend $FLANNEL_BACKEND" 
    # https://github.com/flannel-io/flannel/blob/master/chart/kube-flannel/values.yaml
    helm upgrade --install flannel \
      --namespace kube-network --create-namespace \
      --set podCidr="${CLUSTER_CIDR_FIRST_TWO_OCTETS}.0.0/16" \
      --set flannel.backend="$FLANNEL_BACKEND" \
      flannel/flannel

    echo "-- Deploying Multus" 
    rm -f tmp/multus-daemonset-thick.yml
    curl --silent -fsSL https://raw.githubusercontent.com/k8snetworkplumbingwg/multus-cni/master/deployments/multus-daemonset-thick.yml -o tmp/multus-daemonset-thick.yml
    sed -i.BACKUP 's/namespace: kube-system/namespace: kube-network/g' tmp/multus-daemonset-thick.yml
    kubectl apply -n kube-network -f tmp/multus-daemonset-thick.yml
    
    echo "-- Deploying DHCP CNI plugin" 
    curl --silent -fsSL https://raw.githubusercontent.com/k8snetworkplumbingwg/reference-deployment/master/multus-dhcp/dhcp-daemonset.yml -o tmp/dhcp-daemonset.yml
    sed -i.BACKUP 's/namespace: kube-system/namespace: kube-network/g' tmp/dhcp-daemonset.yml
    kubectl apply -n kube-network -f tmp/dhcp-daemonset.yml
    wait
    sleep 5
    echo "-- Restarting CoreDNS" 
    kubectl delete pod --selector=k8s-app=kube-dns -n kube-system --grace-period=0 --force
    echo "-- waiting for flannel" 
    while [ "$(kubectl get pods -A -l app=flannel -ojson | jq '.items[0].status.phase')" != "\"Running\"" ]; do
      FixFlannel
      sleep 20
    done
    sleep 5
    if [ "$(kubectl get pods -n kube-system -l k8s-app=kube-dns -ojson | jq '.items[0].status.phase')" != "\"Running\"" ]; then
      kubectl delete pod --selector=k8s-app=kube-dns -n kube-system --force
      echo "-- waiting for CoreDNS" 
      while [ "$(kubectl get pods -n kube-system -l k8s-app=kube-dns -ojson | jq '.items[0].status.phase')" != "\"Running\"" ]; do
        FixFlannel
        sleep 20
      done
    fi
    sleep 5
    FixDNS
    echo "-- Installing prometheus-operator and metrics-server" 
    # DEFAULT VALUES: https://github.com/truecharts/charts/blob/master/charts/system/prometheus-operator/values.yaml
    ( helm upgrade --install prometheus-operator oci://tccr.io/truecharts/prometheus-operator --namespace=kube-network ) &
    # DEFAULT VALUES: https://github.com/kubernetes-sigs/metrics-server/blob/master/charts/metrics-server/values.yaml
    ( helm upgrade --install metrics-server metrics-server/metrics-server --set args="{--kubelet-insecure-tls,--kubelet-preferred-address-types=InternalIP,--cert-dir=/tmp}" --set apiService.insecureSkipTLSVerify=true --namespace=kube-network ) &
  else
    echo "Please do step 2 before kubernetes cluster is not installed .." 
  fi
  echo "---------------------------------------------------------------" 
}

##################################################################################
##################################################################################
function step4() {
  if [ -f deploy.csv ]; then
    echo "Do you want to overwrite deploy.csv? (N/y) [TIMEOUT: 30s]" 
    read -t 30 -r CREATE_DEPLOY_FILE
  else
    CREATE_DEPLOY_FILE="y"
  fi
  if [[ $CREATE_DEPLOY_FILE == "y" ]]; then
    rm -f deploy.csv
    deployFileCreation
    echo "-- deploy.csv has been created" 
  fi
  echo "---------------------------------------------------------------" 
}

##################################################################################
##################################################################################
function step5() {
  copyKubeconfig
  curl -fL -H 'Cache-Control: no-cache, no-store' https://raw.githubusercontent.com/alrokayan/kubecsv/main/kubecsv | bash -s -- deploy.csv
}

##################################################################################
##################################################################################
##################################################################################
##################################################################################
##################################################################################
##################################################################################
##################################################################################
##################################################################################
##################################################################################
##################################################################################
##################################################################################
##################################################################################
echo "---------------------------------------------------------------" 
echo "------------------------- K8S TOOLKIT -------------------------" 
echo "---------------------------------------------------------------" 
echo "LOG FILE: $LOG_FILE" 
echo "KUBECONFIG: $KUBECONFIG" 
echo "SSH KEYS: $PRIVATE_KEY"  
echo "kubectl bin: $(which kubectl)"  
echo "---------------------------------------------------------------" 
if [ -z "${NODE_ARRAY[0]}" ] || [ -z "$SSH_USERNAME" ] || [ -z "$PRIVATE_KEY" ] || [ -z "$KUBECONFIG" ] || [ -z "$CLUSTER_CIDR_FIRST_TWO_OCTETS" ] || [ -z "$KUBE_TZ" ] || [ -z "$MASTER_SCHEDULE" ] || [ -z "$L2_SWITCH" ]; then
  echo "Please answer the following questions to create the environment" 
  echo "---------------------------------------------------------------" 
fi
while ! IS_ALL_NODES_ONLINE "$NODE_ARRAY"; do
  source .env
  readArrayVar NODE_ARRAY "Please entre kubernetes cluster's nodes IP addresses the first one is the master (separate IPs with SPACE)" "$(IFS=' ' ; echo "$NODE_ARRAY_DEFAULT" )"
  source .env
done
readVar SSH_USERNAME "$SSH_USERNAME_DEFAULT" "Please entre the SSH username" 1
while ! SSH_COPY_ID "${NODE_ARRAY[@]}" "$PRIVATE_KEY" || [ ! -f "$PRIVATE_KEY" ]; do
  PRIVATE_KEY="$PRIVATE_KEY_DEFAULT"
  readVar PRIVATE_KEY "$PRIVATE_KEY_DEFAULT" "Please enter the absolute path for your private key. It will be created if does not exist. The default value is recommended"
done
readYesNoVar L2_SWITCH "$L2_SWITCH_DEFAULT" "Are all nodes connected to a L2 switch? (entre y or n)" 1
readYesNoVar MASTER_SCHEDULE "$MASTER_SCHEDULE_DEFAULT" "Do you want to schedule pods in the master node? (entre y or n)" 1
if [ ! -f "$KUBECONFIG" ]; then
  KUBECONFIG="$KUBECONFIG_DEFAULT"
  readVar KUBECONFIG "$KUBECONFIG_DEFAULT" "Please entre the path for KUBECONFIG"
fi
readVar CLUSTER_CIDR_FIRST_TWO_OCTETS "$CLUSTER_CIDR_DEFAULT" "Please entre the first two octets of the subnet 16 of the cluster CIDR (10.244 means 10.244.0.0/16)" 1
readVar KUBE_TZ "$TZ_DEFAULT" "Please entre your Time Zone" 1

##############################################################################################################
binInstall false
( export )
CONTINUE=true
while $CONTINUE; do
  clear
  source .env
  if [ "$1" == "" ]; then
    echo "-----------------------------------------------------------" 
    echo "Welcome to K8S TOOLKIT .." 
    echo "-----------------------------------------------------------" 
    echo "(q)    < Quit (and remove tmp and logs folders)" 
    echo "-----------------------------------------------------------" 
    echo "------------------- INSTALLATION STEPS --------------------" 
    echo "-----------------------------------------------------------" 
    echo "[0].....Uninstall Everything" 
    echo "[1].....Prepare hosts and install pre-requisites (apt install)" 
    echo "[2].....Create kubernetes cluster (kubeadm init)" 
    echo "[3].....Deploy kubernetes network (flannel and multus)" 
    echo "[4].....Generate deploy.csv (example content)" 
    echo "[5].....Deploy deploy.csv" 
    echo "-----------------------------------------------------------" 
    echo "-------------------------- TOOLS --------------------------" 
    echo "-----------------------------------------------------------" 
    echo "(un3)...(un) undo step 3 and 5 (deleting all apps and kube-network)" 
    echo "(un5)...(un) undo step 5 (deleting all apps)" 
    echo "(b).....(b) binaries installation locally (helm, kubectl, jq and k9s)" 
    echo "(k).....(k) k9s - monitor K8s cluster status" 
    echo "(c).....(c) copy kubeconfig file from the master node" 
    echo "(n).....(n) network diagnostic tool (dnstools pod deployment)" 
    echo "(d).....(d) dns fix" 
    echo "(s).....(s) swap partition removal" 
    echo "(R).....[R] REBOOT ALL NODES" 
    echo "(all)...(all) installation steps at once" 
    echo "-----------------------------------------------------------" 
    read -r OPTION
  else
    OPTION="$1"
    CONTINUE=false
  fi
  
  case $OPTION in
  q) ## QUIT AND CLEAN UP
    echo "-- Cleaning up " 
    rm -rf tmp
    rm -rf logs
    rm -rf -- *.BACKUP
    rm -rf .*.BACKUP
    exit 0
    ;;
  c) ## Create kubeconfig file
    echo "-- Copying kubeconfig to kubeconfig" 
    rm -f "$KUBECONFIG"
    copyKubeconfig
    END_OF_SCRIPT
    ;;
  s) ## Remove swap partition and reboot
    echo "-- Removing SWAP" 
    SWAPRemoval
    END_OF_SCRIPT
    ;;
  b)
    echo "-- Installing binaries" 
    binInstall
    END_OF_SCRIPT
    ;;
  d)
    echo "-- Fixing DNS" 
    FixDNS
    END_OF_SCRIPT
    ;;
  k) ## k9S - Monitor K8s cluster status
    echo "-- Running k9s" 
    copyKubeconfig
    kubectl version
    k9s version
    k9s -A
    END_OF_SCRIPT
    ;;
  n) ## Deploy dns tools
    echo "-- Running dnstools container" 
    runDNSTool
    END_OF_SCRIPT
    ;;
  R) ## Reboot all nodes
    echo "-- Rebooting all nodes" 
    RESTART_ALL_NODES "${NODE_ARRAY[@]}" "$PRIVATE_KEY"
    END_OF_SCRIPT
    ;;
  un5) ## Undeploy deployment
    echo "-- Un-deploying all apps" 
    unD false
    END_OF_SCRIPT
    ;;
  un3) ## Undeploy deployment
    echo "-- Un-deploying all apps including kube-network namespace" 
    unD
    END_OF_SCRIPT
    ;;
  0)
    step0
    echo "-- Step 0 (apt uninstall) completed" 
    END_OF_SCRIPT
    ;;
  1)
    step1
    echo "-- Step 1 (apt install) completed" 
    END_OF_SCRIPT
    ;;
  2)
    step2
    echo "-- Step 2 (cluster creation) completed" 
    END_OF_SCRIPT
    ;;
  3)
    step3
    echo "-- Step 3 (network deployment) completed" 
    END_OF_SCRIPT
    ;;
  4)
    step4
    echo "-- Step 4 (deploy.csv creation) completed" 
    END_OF_SCRIPT
    ;;
  5)
    step5
    echo "-- Step 5 (deploy.csv deployment) completed" 
    END_OF_SCRIPT
    ;;
  all)
    step0
    echo "-- Step 0 (apt uninstall) completed" 
    step1
    echo "-- Step 1 (apt install) completed" 
    step2
    echo "-- Step 2 (cluster creation) completed" 
    step3
    echo "-- Step 3 (network deployment) completed" 
    step4
    echo "-- Step 4 (deploy.csv creation) completed" 
    step5
    echo "-- Step 5 (deploy.csv deployment) completed" 
    END_OF_SCRIPT
    ;;
  *) ## Invalid option
    echo "--?-- Invalid option" 
    sleep 1
    ;;
  esac
done
